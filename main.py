import os
import json
from flask import Flask, request
from telebot import TeleBot, types

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f"/webhook/{TOKEN}"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = TeleBot(TOKEN)

app = Flask(__name__)

@app.route('/webhook', methods=['POST'])
def webhook():
    print(f"üîë BOT_TOKEN: {TOKEN}, webhook {WEBHOOK_URL}")  # –õ–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

    print("üî• –ó–∞–ø–∏—Ç –Ω–∞ /webhook –æ—Ç—Ä–∏–º–∞–Ω–æ")
    try:
        json_str = request.get_data().decode('UTF-8')
        print(f"üì© –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç: {json_str}")

        update = types.Update.de_json(json_str)
        print(f"üîÑ –î–µ–∫–æ–¥–æ–≤–∞–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {update}")  # –õ–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

        print("‚úÖ –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...")  # –õ–æ–≥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–æ—Ç
        bot.process_new_updates([update])
        print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –±–æ—Ç—É")

        return 'OK', 200
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return 'Internal Server Error', 500


@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        chat_id = message.chat.id
        bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
        print("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")


# @bot.message_handler(commands=['start'])
# def send_welcome(message):
#     print(f"üöÄ –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ {message.chat.id}")
#     chat_id = message.chat.id
#     markup = types.InlineKeyboardMarkup()
    
#     bot.send_message(chat_id, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!")

#     if get_token(chat_id) is None:
#         markup.add(types.InlineKeyboardButton('–í—Ö—ñ–¥', callback_data='login'))
#         markup.add(types.InlineKeyboardButton('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è', callback_data='registration'))
#     else:
#         if check_beehive_exists(chat_id):  # –ü–µ—Ä–µ–¥–∞—î–º–æ chat_id
#             markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Å—ñ–∫—É', callback_data='view_apiary'))
#             markup.add(types.InlineKeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Å—ñ–∫—É', callback_data='create_apiary'))
#         else:
#             markup.add(types.InlineKeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Å—ñ–∫—É', callback_data='create_apiary'))

#     bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['login', 'registration', 'create_apiary', 'view_apiary', 'back_in_menu'])
def callback_handler(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    bot.delete_message(chat_id, message_id)

    if call.data == 'login':
        process_login(call.message)
    elif call.data == 'registration':
        process_registration(call.message)
    elif call.data == 'create_apiary':
        create_apiary(call.message)
    elif call.data == 'view_apiary':
        view_apiary(call.message)
    elif call.data == 'back_in_menu':
        send_welcome(call.message)

if __name__ == "__main__":
    bot.remove_webhook()  # –í–∏–º–∫–Ω—É—Ç–∏ —Å—Ç–∞—Ä—ñ –≤–µ–±—Ö—É–∫–∏, —è–∫—â–æ —î
    bot.set_webhook(url=WEBHOOK_URL)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π –≤–µ–±—Ö—É–∫
    print(f"‚úîÔ∏è –í–µ–±—Ö—É–∫ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –Ω–∞: {WEBHOOK_URL}")
    app.run(host="0.0.0.0", port=10000)


# if __name__ == "__main__":
#     print("‚úÖ –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞...")

#     # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
#     bot.remove_webhook()
#     bot.set_webhook(url=f"{WEBHOOK_URL}")

#     # –ó–∞–ø—É—Å–∫ Flask
#     app.run(host="0.0.0.0", port=10000, use_reloader=False)
